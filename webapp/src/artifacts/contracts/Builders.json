{
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "builders",
      "outputs": [
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "parity",
          "type": "bool"
        },
        {
          "internalType": "bytes32",
          "name": "publicKey",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "parity",
          "type": "bool"
        },
        {
          "internalType": "bytes32",
          "name": "publicKey",
          "type": "bytes32"
        }
      ],
      "name": "setBuilderPublickey",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "allSourcePaths": {
    "8": "contracts/project/Builders.sol"
  },
  "ast": {
    "absolutePath": "contracts/project/Builders.sol",
    "exportedSymbols": {
      "Builders": [
        337
      ]
    },
    "id": 338,
    "license": "GPL3",
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 268,
        "literals": [
          "solidity",
          "^",
          "0.8",
          ".0"
        ],
        "nodeType": "PragmaDirective",
        "src": "33:23:8"
      },
      {
        "abstract": false,
        "baseContracts": [],
        "canonicalName": "Builders",
        "contractDependencies": [],
        "contractKind": "contract",
        "documentation": {
          "id": 269,
          "nodeType": "StructuredDocumentation",
          "src": "58:48:8",
          "text": " @dev Reference builder in the project"
        },
        "fullyImplemented": true,
        "id": 337,
        "linearizedBaseContracts": [
          337
        ],
        "name": "Builders",
        "nameLocation": "116:8:8",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "canonicalName": "Builders.Builder",
            "id": 276,
            "members": [
              {
                "constant": false,
                "id": 271,
                "mutability": "mutable",
                "name": "_address",
                "nameLocation": "202:8:8",
                "nodeType": "VariableDeclaration",
                "scope": 276,
                "src": "194:16:8",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_address",
                  "typeString": "address"
                },
                "typeName": {
                  "id": 270,
                  "name": "address",
                  "nodeType": "ElementaryTypeName",
                  "src": "194:7:8",
                  "stateMutability": "nonpayable",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  }
                },
                "visibility": "internal"
              },
              {
                "constant": false,
                "id": 273,
                "mutability": "mutable",
                "name": "parity",
                "nameLocation": "225:6:8",
                "nodeType": "VariableDeclaration",
                "scope": 276,
                "src": "220:11:8",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_bool",
                  "typeString": "bool"
                },
                "typeName": {
                  "id": 272,
                  "name": "bool",
                  "nodeType": "ElementaryTypeName",
                  "src": "220:4:8",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  }
                },
                "visibility": "internal"
              },
              {
                "constant": false,
                "id": 275,
                "mutability": "mutable",
                "name": "publicKey",
                "nameLocation": "249:9:8",
                "nodeType": "VariableDeclaration",
                "scope": 276,
                "src": "241:17:8",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_bytes32",
                  "typeString": "bytes32"
                },
                "typeName": {
                  "id": 274,
                  "name": "bytes32",
                  "nodeType": "ElementaryTypeName",
                  "src": "241:7:8",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  }
                },
                "visibility": "internal"
              }
            ],
            "name": "Builder",
            "nameLocation": "176:7:8",
            "nodeType": "StructDefinition",
            "scope": 337,
            "src": "169:96:8",
            "visibility": "public"
          },
          {
            "constant": false,
            "functionSelector": "144ddefc",
            "id": 281,
            "mutability": "mutable",
            "name": "builders",
            "nameLocation": "306:8:8",
            "nodeType": "VariableDeclaration",
            "scope": 337,
            "src": "271:43:8",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_mapping$_t_address_$_t_struct$_Builder_$276_storage_$",
              "typeString": "mapping(address => struct Builders.Builder)"
            },
            "typeName": {
              "id": 280,
              "keyType": {
                "id": 277,
                "name": "address",
                "nodeType": "ElementaryTypeName",
                "src": "279:7:8",
                "typeDescriptions": {
                  "typeIdentifier": "t_address",
                  "typeString": "address"
                }
              },
              "nodeType": "Mapping",
              "src": "271:27:8",
              "typeDescriptions": {
                "typeIdentifier": "t_mapping$_t_address_$_t_struct$_Builder_$276_storage_$",
                "typeString": "mapping(address => struct Builders.Builder)"
              },
              "valueType": {
                "id": 279,
                "nodeType": "UserDefinedTypeName",
                "pathNode": {
                  "id": 278,
                  "name": "Builder",
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 276,
                  "src": "290:7:8"
                },
                "referencedDeclaration": 276,
                "src": "290:7:8",
                "typeDescriptions": {
                  "typeIdentifier": "t_struct$_Builder_$276_storage_ptr",
                  "typeString": "struct Builders.Builder"
                }
              }
            },
            "visibility": "public"
          },
          {
            "body": {
              "id": 298,
              "nodeType": "Block",
              "src": "342:160:8",
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "commonType": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "id": 293,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "expression": {
                            "baseExpression": {
                              "id": 284,
                              "name": "builders",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 281,
                              "src": "373:8:8",
                              "typeDescriptions": {
                                "typeIdentifier": "t_mapping$_t_address_$_t_struct$_Builder_$276_storage_$",
                                "typeString": "mapping(address => struct Builders.Builder storage ref)"
                              }
                            },
                            "id": 287,
                            "indexExpression": {
                              "expression": {
                                "id": 285,
                                "name": "msg",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": -15,
                                "src": "382:3:8",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_magic_message",
                                  "typeString": "msg"
                                }
                              },
                              "id": 286,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "sender",
                              "nodeType": "MemberAccess",
                              "src": "382:10:8",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "nodeType": "IndexAccess",
                            "src": "373:20:8",
                            "typeDescriptions": {
                              "typeIdentifier": "t_struct$_Builder_$276_storage",
                              "typeString": "struct Builders.Builder storage ref"
                            }
                          },
                          "id": 288,
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "_address",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 271,
                          "src": "373:29:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "!=",
                        "rightExpression": {
                          "arguments": [
                            {
                              "hexValue": "30",
                              "id": 291,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "number",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "414:1:8",
                              "typeDescriptions": {
                                "typeIdentifier": "t_rational_0_by_1",
                                "typeString": "int_const 0"
                              },
                              "value": "0"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_rational_0_by_1",
                                "typeString": "int_const 0"
                              }
                            ],
                            "id": 290,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "lValueRequested": false,
                            "nodeType": "ElementaryTypeNameExpression",
                            "src": "406:7:8",
                            "typeDescriptions": {
                              "typeIdentifier": "t_type$_t_address_$",
                              "typeString": "type(address)"
                            },
                            "typeName": {
                              "id": 289,
                              "name": "address",
                              "nodeType": "ElementaryTypeName",
                              "src": "406:7:8",
                              "typeDescriptions": {}
                            }
                          },
                          "id": 292,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "typeConversion",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "406:10:8",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "src": "373:43:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "4f6e6c79206275696c646572732061726520616c6c6f77656420746f206578656375746520746869732e",
                        "id": 294,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "430:44:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_3c25c396dc982c1c93beb11d42eafe130a4f14a5a4e75cec523226e24287b1cd",
                          "typeString": "literal_string \"Only builders are allowed to execute this.\""
                        },
                        "value": "Only builders are allowed to execute this."
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_3c25c396dc982c1c93beb11d42eafe130a4f14a5a4e75cec523226e24287b1cd",
                          "typeString": "literal_string \"Only builders are allowed to execute this.\""
                        }
                      ],
                      "id": 283,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "352:7:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 295,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "352:132:8",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 296,
                  "nodeType": "ExpressionStatement",
                  "src": "352:132:8"
                },
                {
                  "id": 297,
                  "nodeType": "PlaceholderStatement",
                  "src": "494:1:8"
                }
              ]
            },
            "id": 299,
            "name": "onlyBuilder",
            "nameLocation": "330:11:8",
            "nodeType": "ModifierDefinition",
            "parameters": {
              "id": 282,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "342:0:8"
            },
            "src": "321:181:8",
            "virtual": false,
            "visibility": "internal"
          },
          {
            "body": {
              "id": 335,
              "nodeType": "Block",
              "src": "762:186:8",
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "commonType": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "id": 315,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "expression": {
                            "baseExpression": {
                              "id": 308,
                              "name": "builders",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 281,
                              "src": "780:8:8",
                              "typeDescriptions": {
                                "typeIdentifier": "t_mapping$_t_address_$_t_struct$_Builder_$276_storage_$",
                                "typeString": "mapping(address => struct Builders.Builder storage ref)"
                              }
                            },
                            "id": 311,
                            "indexExpression": {
                              "expression": {
                                "id": 309,
                                "name": "msg",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": -15,
                                "src": "789:3:8",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_magic_message",
                                  "typeString": "msg"
                                }
                              },
                              "id": 310,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "sender",
                              "nodeType": "MemberAccess",
                              "src": "789:10:8",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "nodeType": "IndexAccess",
                            "src": "780:20:8",
                            "typeDescriptions": {
                              "typeIdentifier": "t_struct$_Builder_$276_storage",
                              "typeString": "struct Builders.Builder storage ref"
                            }
                          },
                          "id": 312,
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "_address",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 271,
                          "src": "780:29:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "==",
                        "rightExpression": {
                          "expression": {
                            "id": 313,
                            "name": "msg",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": -15,
                            "src": "813:3:8",
                            "typeDescriptions": {
                              "typeIdentifier": "t_magic_message",
                              "typeString": "msg"
                            }
                          },
                          "id": 314,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "sender",
                          "nodeType": "MemberAccess",
                          "src": "813:10:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "src": "780:43:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "4275696c646572206e6f7420736574",
                        "id": 316,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "825:17:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_eb45edc3be84c7a21d1d75d81cfa7b066b2803bba05f502debb8c88f950ce6de",
                          "typeString": "literal_string \"Builder not set\""
                        },
                        "value": "Builder not set"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_eb45edc3be84c7a21d1d75d81cfa7b066b2803bba05f502debb8c88f950ce6de",
                          "typeString": "literal_string \"Builder not set\""
                        }
                      ],
                      "id": 307,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "772:7:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 317,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "772:71:8",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 318,
                  "nodeType": "ExpressionStatement",
                  "src": "772:71:8"
                },
                {
                  "expression": {
                    "id": 325,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "expression": {
                        "baseExpression": {
                          "id": 319,
                          "name": "builders",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 281,
                          "src": "853:8:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_mapping$_t_address_$_t_struct$_Builder_$276_storage_$",
                            "typeString": "mapping(address => struct Builders.Builder storage ref)"
                          }
                        },
                        "id": 322,
                        "indexExpression": {
                          "expression": {
                            "id": 320,
                            "name": "msg",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": -15,
                            "src": "862:3:8",
                            "typeDescriptions": {
                              "typeIdentifier": "t_magic_message",
                              "typeString": "msg"
                            }
                          },
                          "id": 321,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "sender",
                          "nodeType": "MemberAccess",
                          "src": "862:10:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "nodeType": "IndexAccess",
                        "src": "853:20:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_Builder_$276_storage",
                          "typeString": "struct Builders.Builder storage ref"
                        }
                      },
                      "id": 323,
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "memberName": "parity",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 273,
                      "src": "853:27:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "id": 324,
                      "name": "parity",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 302,
                      "src": "883:6:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "src": "853:36:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 326,
                  "nodeType": "ExpressionStatement",
                  "src": "853:36:8"
                },
                {
                  "expression": {
                    "id": 333,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "expression": {
                        "baseExpression": {
                          "id": 327,
                          "name": "builders",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 281,
                          "src": "899:8:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_mapping$_t_address_$_t_struct$_Builder_$276_storage_$",
                            "typeString": "mapping(address => struct Builders.Builder storage ref)"
                          }
                        },
                        "id": 330,
                        "indexExpression": {
                          "expression": {
                            "id": 328,
                            "name": "msg",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": -15,
                            "src": "908:3:8",
                            "typeDescriptions": {
                              "typeIdentifier": "t_magic_message",
                              "typeString": "msg"
                            }
                          },
                          "id": 329,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "sender",
                          "nodeType": "MemberAccess",
                          "src": "908:10:8",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "nodeType": "IndexAccess",
                        "src": "899:20:8",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_Builder_$276_storage",
                          "typeString": "struct Builders.Builder storage ref"
                        }
                      },
                      "id": 331,
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "memberName": "publicKey",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 275,
                      "src": "899:30:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes32",
                        "typeString": "bytes32"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "id": 332,
                      "name": "publicKey",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 304,
                      "src": "932:9:8",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes32",
                        "typeString": "bytes32"
                      }
                    },
                    "src": "899:42:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "id": 334,
                  "nodeType": "ExpressionStatement",
                  "src": "899:42:8"
                }
              ]
            },
            "documentation": {
              "id": 300,
              "nodeType": "StructuredDocumentation",
              "src": "508:181:8",
              "text": " @notice Builder can update his public key.\n @param parity based on header value (0x02/0x03 - false/true)\n @param publicKey compressed public key value"
            },
            "functionSelector": "5ae12c73",
            "id": 336,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "setBuilderPublickey",
            "nameLocation": "703:19:8",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 305,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 302,
                  "mutability": "mutable",
                  "name": "parity",
                  "nameLocation": "728:6:8",
                  "nodeType": "VariableDeclaration",
                  "scope": 336,
                  "src": "723:11:8",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 301,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "723:4:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 304,
                  "mutability": "mutable",
                  "name": "publicKey",
                  "nameLocation": "744:9:8",
                  "nodeType": "VariableDeclaration",
                  "scope": 336,
                  "src": "736:17:8",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  },
                  "typeName": {
                    "id": 303,
                    "name": "bytes32",
                    "nodeType": "ElementaryTypeName",
                    "src": "736:7:8",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "722:32:8"
            },
            "returnParameters": {
              "id": 306,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "762:0:8"
            },
            "scope": 337,
            "src": "694:254:8",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          }
        ],
        "scope": 338,
        "src": "107:881:8",
        "usedErrors": []
      }
    ],
    "src": "33:956:8"
  },
  "bytecode": "608060405234801561001057600080fd5b506101da806100206000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c8063144ddefc1461003b5780635ae12c73146100a1575b600080fd5b610078610049366004610143565b600060208190529081526040902080546001909101546001600160a01b03821691600160a01b900460ff169083565b604080516001600160a01b03909416845291151560208401529082015260600160405180910390f35b6100b46100af366004610173565b6100b6565b005b336000818152602081905260409020546001600160a01b0316146101125760405162461bcd60e51b815260206004820152600f60248201526e109d5a5b19195c881b9bdd081cd95d608a1b604482015260640160405180910390fd5b3360009081526020819052604090208054921515600160a01b0260ff60a01b19909316929092178255600190910155565b60006020828403121561015557600080fd5b81356001600160a01b038116811461016c57600080fd5b9392505050565b6000806040838503121561018657600080fd5b8235801515811461019657600080fd5b94602093909301359350505056fea2646970667358221220ba0d17b67827b67eef021c029375211c1b874f9a8e2e0f37574d00f98311427a64736f6c634300080a0033",
  "bytecodeSha1": "42ee6c0d0a1e30da286ba11abc69b47ea7581b42",
  "compiler": {
    "evm_version": "istanbul",
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "version": "0.8.10+commit.fc410830"
  },
  "contractName": "Builders",
  "coverageMap": {
    "branches": {
      "8": {
        "Builders.setBuilderPublickey": {
          "3": [
            780,
            823,
            true
          ]
        }
      }
    },
    "statements": {
      "8": {
        "Builders.setBuilderPublickey": {
          "0": [
            772,
            843
          ],
          "1": [
            853,
            889
          ],
          "2": [
            899,
            941
          ]
        }
      }
    }
  },
  "dependencies": [],
  "deployedBytecode": "608060405234801561001057600080fd5b50600436106100365760003560e01c8063144ddefc1461003b5780635ae12c73146100a1575b600080fd5b610078610049366004610143565b600060208190529081526040902080546001909101546001600160a01b03821691600160a01b900460ff169083565b604080516001600160a01b03909416845291151560208401529082015260600160405180910390f35b6100b46100af366004610173565b6100b6565b005b336000818152602081905260409020546001600160a01b0316146101125760405162461bcd60e51b815260206004820152600f60248201526e109d5a5b19195c881b9bdd081cd95d608a1b604482015260640160405180910390fd5b3360009081526020819052604090208054921515600160a01b0260ff60a01b19909316929092178255600190910155565b60006020828403121561015557600080fd5b81356001600160a01b038116811461016c57600080fd5b9392505050565b6000806040838503121561018657600080fd5b8235801515811461019657600080fd5b94602093909301359350505056fea2646970667358221220ba0d17b67827b67eef021c029375211c1b874f9a8e2e0f37574d00f98311427a64736f6c634300080a0033",
  "deployedSourceMap": "107:881:8:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;271:43;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;271:43:8;;;-1:-1:-1;;;271:43:8;;;;;;;;;;;-1:-1:-1;;;;;519:32:11;;;501:51;;595:14;;588:22;583:2;568:18;;561:50;627:18;;;620:34;489:2;474:18;271:43:8;;;;;;;694:254;;;;;;:::i;:::-;;:::i;:::-;;;813:10;780:8;:20;;;;;;;;;;:29;-1:-1:-1;;;;;780:29:8;:43;772:71;;;;-1:-1:-1;;;772:71:8;;1213:2:11;772:71:8;;;1195:21:11;1252:2;1232:18;;;1225:30;-1:-1:-1;;;1271:18:11;;;1264:45;1326:18;;772:71:8;;;;;;;;862:10;853:8;:20;;;;;;;;;;:36;;;;;-1:-1:-1;;;853:36:8;-1:-1:-1;;;;853:36:8;;;;;;;;;-1:-1:-1;899:30:8;;;:42;694:254::o;14:286:11:-;73:6;126:2;114:9;105:7;101:23;97:32;94:52;;;142:1;139;132:12;94:52;168:23;;-1:-1:-1;;;;;220:31:11;;210:42;;200:70;;266:1;263;256:12;200:70;289:5;14:286;-1:-1:-1;;;14:286:11:o;665:341::-;730:6;738;791:2;779:9;770:7;766:23;762:32;759:52;;;807:1;804;797:12;759:52;846:9;833:23;899:5;892:13;885:21;878:5;875:32;865:60;;921:1;918;911:12;865:60;944:5;996:2;981:18;;;;968:32;;-1:-1:-1;;;665:341:11:o",
  "language": "Solidity",
  "natspec": {
    "details": "Reference builder in the project",
    "kind": "dev",
    "methods": {
      "setBuilderPublickey(bool,bytes32)": {
        "notice": "Builder can update his public key.",
        "params": {
          "parity": "based on header value (0x02/0x03 - false/true)",
          "publicKey": "compressed public key value"
        }
      }
    },
    "version": 1
  },
  "offset": [
    107,
    988
  ],
  "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x36 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x144DDEFC EQ PUSH2 0x3B JUMPI DUP1 PUSH4 0x5AE12C73 EQ PUSH2 0xA1 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x78 PUSH2 0x49 CALLDATASIZE PUSH1 0x4 PUSH2 0x143 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP2 SWAP1 MSTORE SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0x1 SWAP1 SWAP2 ADD SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND SWAP2 PUSH1 0x1 PUSH1 0xA0 SHL SWAP1 DIV PUSH1 0xFF AND SWAP1 DUP4 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP5 AND DUP5 MSTORE SWAP2 ISZERO ISZERO PUSH1 0x20 DUP5 ADD MSTORE SWAP1 DUP3 ADD MSTORE PUSH1 0x60 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0xB4 PUSH2 0xAF CALLDATASIZE PUSH1 0x4 PUSH2 0x173 JUMP JUMPDEST PUSH2 0xB6 JUMP JUMPDEST STOP JUMPDEST CALLER PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x112 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xF PUSH1 0x24 DUP3 ADD MSTORE PUSH15 0x109D5A5B19195C881B9BDD081CD95D PUSH1 0x8A SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD SWAP3 ISZERO ISZERO PUSH1 0x1 PUSH1 0xA0 SHL MUL PUSH1 0xFF PUSH1 0xA0 SHL NOT SWAP1 SWAP4 AND SWAP3 SWAP1 SWAP3 OR DUP3 SSTORE PUSH1 0x1 SWAP1 SWAP2 ADD SSTORE JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x155 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x16C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x186 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0x196 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP5 PUSH1 0x20 SWAP4 SWAP1 SWAP4 ADD CALLDATALOAD SWAP4 POP POP POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xBA 0xD OR 0xB6 PUSH25 0x27B67EEF021C029375211C1B874F9A8E2E0F37574D00F98311 TIMESTAMP PUSH27 0x64736F6C634300080A003300000000000000000000000000000000 ",
  "pcMap": {
    "0": {
      "offset": [
        107,
        988
      ],
      "op": "PUSH1",
      "path": "8",
      "value": "0x80"
    },
    "2": {
      "fn": null,
      "offset": [
        107,
        988
      ],
      "op": "PUSH1",
      "path": "8",
      "value": "0x40"
    },
    "4": {
      "fn": null,
      "offset": [
        107,
        988
      ],
      "op": "MSTORE",
      "path": "8"
    },
    "5": {
      "fn": null,
      "offset": [
        107,
        988
      ],
      "op": "CALLVALUE",
      "path": "8"
    },
    "6": {
      "fn": null,
      "offset": [
        107,
        988
      ],
      "op": "DUP1",
      "path": "8"
    },
    "7": {
      "fn": null,
      "offset": [
        107,
        988
      ],
      "op": "ISZERO",
      "path": "8"
    },
    "8": {
      "fn": null,
      "offset": [
        107,
        988
      ],
      "op": "PUSH2",
      "path": "8",
      "value": "0x10"
    },
    "11": {
      "fn": null,
      "offset": [
        107,
        988
      ],
      "op": "JUMPI",
      "path": "8"
    },
    "12": {
      "fn": null,
      "offset": [
        107,
        988
      ],
      "op": "PUSH1",
      "path": "8",
      "value": "0x0"
    },
    "14": {
      "fn": null,
      "offset": [
        107,
        988
      ],
      "op": "DUP1",
      "path": "8"
    },
    "15": {
      "dev": "Cannot send ether to nonpayable function",
      "fn": null,
      "offset": [
        107,
        988
      ],
      "op": "REVERT",
      "path": "8"
    },
    "16": {
      "fn": null,
      "offset": [
        107,
        988
      ],
      "op": "JUMPDEST",
      "path": "8"
    },
    "17": {
      "fn": null,
      "offset": [
        107,
        988
      ],
      "op": "POP",
      "path": "8"
    },
    "18": {
      "fn": null,
      "offset": [
        107,
        988
      ],
      "op": "PUSH1",
      "path": "8",
      "value": "0x4"
    },
    "20": {
      "fn": null,
      "offset": [
        107,
        988
      ],
      "op": "CALLDATASIZE",
      "path": "8"
    },
    "21": {
      "fn": null,
      "offset": [
        107,
        988
      ],
      "op": "LT",
      "path": "8"
    },
    "22": {
      "fn": null,
      "offset": [
        107,
        988
      ],
      "op": "PUSH2",
      "path": "8",
      "value": "0x36"
    },
    "25": {
      "fn": null,
      "offset": [
        107,
        988
      ],
      "op": "JUMPI",
      "path": "8"
    },
    "26": {
      "fn": null,
      "offset": [
        107,
        988
      ],
      "op": "PUSH1",
      "path": "8",
      "value": "0x0"
    },
    "28": {
      "fn": null,
      "offset": [
        107,
        988
      ],
      "op": "CALLDATALOAD",
      "path": "8"
    },
    "29": {
      "fn": null,
      "offset": [
        107,
        988
      ],
      "op": "PUSH1",
      "path": "8",
      "value": "0xE0"
    },
    "31": {
      "fn": null,
      "offset": [
        107,
        988
      ],
      "op": "SHR",
      "path": "8"
    },
    "32": {
      "fn": null,
      "offset": [
        107,
        988
      ],
      "op": "DUP1",
      "path": "8"
    },
    "33": {
      "fn": null,
      "offset": [
        107,
        988
      ],
      "op": "PUSH4",
      "path": "8",
      "value": "0x144DDEFC"
    },
    "38": {
      "fn": null,
      "offset": [
        107,
        988
      ],
      "op": "EQ",
      "path": "8"
    },
    "39": {
      "fn": null,
      "offset": [
        107,
        988
      ],
      "op": "PUSH2",
      "path": "8",
      "value": "0x3B"
    },
    "42": {
      "fn": null,
      "offset": [
        107,
        988
      ],
      "op": "JUMPI",
      "path": "8"
    },
    "43": {
      "fn": null,
      "offset": [
        107,
        988
      ],
      "op": "DUP1",
      "path": "8"
    },
    "44": {
      "fn": null,
      "offset": [
        107,
        988
      ],
      "op": "PUSH4",
      "path": "8",
      "value": "0x5AE12C73"
    },
    "49": {
      "fn": null,
      "offset": [
        107,
        988
      ],
      "op": "EQ",
      "path": "8"
    },
    "50": {
      "fn": null,
      "offset": [
        107,
        988
      ],
      "op": "PUSH2",
      "path": "8",
      "value": "0xA1"
    },
    "53": {
      "fn": null,
      "offset": [
        107,
        988
      ],
      "op": "JUMPI",
      "path": "8"
    },
    "54": {
      "fn": null,
      "offset": [
        107,
        988
      ],
      "op": "JUMPDEST",
      "path": "8"
    },
    "55": {
      "fn": null,
      "offset": [
        107,
        988
      ],
      "op": "PUSH1",
      "path": "8",
      "value": "0x0"
    },
    "57": {
      "fn": null,
      "offset": [
        107,
        988
      ],
      "op": "DUP1",
      "path": "8"
    },
    "58": {
      "first_revert": true,
      "fn": null,
      "offset": [
        107,
        988
      ],
      "op": "REVERT",
      "path": "8"
    },
    "59": {
      "offset": [
        271,
        314
      ],
      "op": "JUMPDEST",
      "path": "8"
    },
    "60": {
      "fn": null,
      "offset": [
        271,
        314
      ],
      "op": "PUSH2",
      "path": "8",
      "value": "0x78"
    },
    "63": {
      "fn": null,
      "offset": [
        271,
        314
      ],
      "op": "PUSH2",
      "path": "8",
      "value": "0x49"
    },
    "66": {
      "fn": null,
      "offset": [
        271,
        314
      ],
      "op": "CALLDATASIZE",
      "path": "8"
    },
    "67": {
      "fn": null,
      "offset": [
        271,
        314
      ],
      "op": "PUSH1",
      "path": "8",
      "value": "0x4"
    },
    "69": {
      "fn": null,
      "offset": [
        271,
        314
      ],
      "op": "PUSH2",
      "path": "8",
      "value": "0x143"
    },
    "72": {
      "fn": null,
      "jump": "i",
      "offset": [
        271,
        314
      ],
      "op": "JUMP",
      "path": "8"
    },
    "73": {
      "fn": null,
      "offset": [
        271,
        314
      ],
      "op": "JUMPDEST",
      "path": "8"
    },
    "74": {
      "fn": null,
      "offset": [
        271,
        314
      ],
      "op": "PUSH1",
      "path": "8",
      "value": "0x0"
    },
    "76": {
      "fn": null,
      "offset": [
        271,
        314
      ],
      "op": "PUSH1",
      "path": "8",
      "value": "0x20"
    },
    "78": {
      "fn": null,
      "offset": [
        271,
        314
      ],
      "op": "DUP2",
      "path": "8"
    },
    "79": {
      "fn": null,
      "offset": [
        271,
        314
      ],
      "op": "SWAP1",
      "path": "8"
    },
    "80": {
      "fn": null,
      "offset": [
        271,
        314
      ],
      "op": "MSTORE",
      "path": "8"
    },
    "81": {
      "fn": null,
      "offset": [
        271,
        314
      ],
      "op": "SWAP1",
      "path": "8"
    },
    "82": {
      "fn": null,
      "offset": [
        271,
        314
      ],
      "op": "DUP2",
      "path": "8"
    },
    "83": {
      "fn": null,
      "offset": [
        271,
        314
      ],
      "op": "MSTORE",
      "path": "8"
    },
    "84": {
      "fn": null,
      "offset": [
        271,
        314
      ],
      "op": "PUSH1",
      "path": "8",
      "value": "0x40"
    },
    "86": {
      "fn": null,
      "offset": [
        271,
        314
      ],
      "op": "SWAP1",
      "path": "8"
    },
    "87": {
      "fn": null,
      "offset": [
        271,
        314
      ],
      "op": "KECCAK256",
      "path": "8"
    },
    "88": {
      "fn": null,
      "offset": [
        271,
        314
      ],
      "op": "DUP1",
      "path": "8"
    },
    "89": {
      "fn": null,
      "offset": [
        271,
        314
      ],
      "op": "SLOAD",
      "path": "8"
    },
    "90": {
      "fn": null,
      "offset": [
        271,
        314
      ],
      "op": "PUSH1",
      "path": "8",
      "value": "0x1"
    },
    "92": {
      "fn": null,
      "offset": [
        271,
        314
      ],
      "op": "SWAP1",
      "path": "8"
    },
    "93": {
      "fn": null,
      "offset": [
        271,
        314
      ],
      "op": "SWAP2",
      "path": "8"
    },
    "94": {
      "fn": null,
      "offset": [
        271,
        314
      ],
      "op": "ADD",
      "path": "8"
    },
    "95": {
      "fn": null,
      "offset": [
        271,
        314
      ],
      "op": "SLOAD",
      "path": "8"
    },
    "96": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "98": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "100": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "102": {
      "op": "SHL"
    },
    "103": {
      "op": "SUB"
    },
    "104": {
      "offset": [
        271,
        314
      ],
      "op": "DUP3",
      "path": "8"
    },
    "105": {
      "fn": null,
      "offset": [
        271,
        314
      ],
      "op": "AND",
      "path": "8"
    },
    "106": {
      "fn": null,
      "offset": [
        271,
        314
      ],
      "op": "SWAP2",
      "path": "8"
    },
    "107": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "109": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "111": {
      "op": "SHL"
    },
    "112": {
      "offset": [
        271,
        314
      ],
      "op": "SWAP1",
      "path": "8"
    },
    "113": {
      "fn": null,
      "offset": [
        271,
        314
      ],
      "op": "DIV",
      "path": "8"
    },
    "114": {
      "fn": null,
      "offset": [
        271,
        314
      ],
      "op": "PUSH1",
      "path": "8",
      "value": "0xFF"
    },
    "116": {
      "fn": null,
      "offset": [
        271,
        314
      ],
      "op": "AND",
      "path": "8"
    },
    "117": {
      "fn": null,
      "offset": [
        271,
        314
      ],
      "op": "SWAP1",
      "path": "8"
    },
    "118": {
      "fn": null,
      "offset": [
        271,
        314
      ],
      "op": "DUP4",
      "path": "8"
    },
    "119": {
      "fn": null,
      "offset": [
        271,
        314
      ],
      "op": "JUMP",
      "path": "8"
    },
    "120": {
      "fn": null,
      "offset": [
        271,
        314
      ],
      "op": "JUMPDEST",
      "path": "8"
    },
    "121": {
      "fn": null,
      "offset": [
        271,
        314
      ],
      "op": "PUSH1",
      "path": "8",
      "value": "0x40"
    },
    "123": {
      "fn": null,
      "offset": [
        271,
        314
      ],
      "op": "DUP1",
      "path": "8"
    },
    "124": {
      "fn": null,
      "offset": [
        271,
        314
      ],
      "op": "MLOAD",
      "path": "8"
    },
    "125": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "127": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "129": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "131": {
      "op": "SHL"
    },
    "132": {
      "op": "SUB"
    },
    "133": {
      "op": "SWAP1"
    },
    "134": {
      "op": "SWAP5"
    },
    "135": {
      "op": "AND"
    },
    "136": {
      "op": "DUP5"
    },
    "137": {
      "op": "MSTORE"
    },
    "138": {
      "op": "SWAP2"
    },
    "139": {
      "op": "ISZERO"
    },
    "140": {
      "op": "ISZERO"
    },
    "141": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "143": {
      "op": "DUP5"
    },
    "144": {
      "op": "ADD"
    },
    "145": {
      "op": "MSTORE"
    },
    "146": {
      "op": "SWAP1"
    },
    "147": {
      "op": "DUP3"
    },
    "148": {
      "op": "ADD"
    },
    "149": {
      "op": "MSTORE"
    },
    "150": {
      "op": "PUSH1",
      "value": "0x60"
    },
    "152": {
      "op": "ADD"
    },
    "153": {
      "offset": [
        271,
        314
      ],
      "op": "PUSH1",
      "path": "8",
      "value": "0x40"
    },
    "155": {
      "fn": null,
      "offset": [
        271,
        314
      ],
      "op": "MLOAD",
      "path": "8"
    },
    "156": {
      "fn": null,
      "offset": [
        271,
        314
      ],
      "op": "DUP1",
      "path": "8"
    },
    "157": {
      "fn": null,
      "offset": [
        271,
        314
      ],
      "op": "SWAP2",
      "path": "8"
    },
    "158": {
      "fn": null,
      "offset": [
        271,
        314
      ],
      "op": "SUB",
      "path": "8"
    },
    "159": {
      "fn": null,
      "offset": [
        271,
        314
      ],
      "op": "SWAP1",
      "path": "8"
    },
    "160": {
      "fn": null,
      "offset": [
        271,
        314
      ],
      "op": "RETURN",
      "path": "8"
    },
    "161": {
      "fn": "Builders.setBuilderPublickey",
      "offset": [
        694,
        948
      ],
      "op": "JUMPDEST",
      "path": "8"
    },
    "162": {
      "fn": "Builders.setBuilderPublickey",
      "offset": [
        694,
        948
      ],
      "op": "PUSH2",
      "path": "8",
      "value": "0xB4"
    },
    "165": {
      "fn": "Builders.setBuilderPublickey",
      "offset": [
        694,
        948
      ],
      "op": "PUSH2",
      "path": "8",
      "value": "0xAF"
    },
    "168": {
      "fn": "Builders.setBuilderPublickey",
      "offset": [
        694,
        948
      ],
      "op": "CALLDATASIZE",
      "path": "8"
    },
    "169": {
      "fn": "Builders.setBuilderPublickey",
      "offset": [
        694,
        948
      ],
      "op": "PUSH1",
      "path": "8",
      "value": "0x4"
    },
    "171": {
      "fn": "Builders.setBuilderPublickey",
      "offset": [
        694,
        948
      ],
      "op": "PUSH2",
      "path": "8",
      "value": "0x173"
    },
    "174": {
      "fn": "Builders.setBuilderPublickey",
      "jump": "i",
      "offset": [
        694,
        948
      ],
      "op": "JUMP",
      "path": "8"
    },
    "175": {
      "fn": "Builders.setBuilderPublickey",
      "offset": [
        694,
        948
      ],
      "op": "JUMPDEST",
      "path": "8"
    },
    "176": {
      "fn": "Builders.setBuilderPublickey",
      "offset": [
        694,
        948
      ],
      "op": "PUSH2",
      "path": "8",
      "value": "0xB6"
    },
    "179": {
      "fn": "Builders.setBuilderPublickey",
      "jump": "i",
      "offset": [
        694,
        948
      ],
      "op": "JUMP",
      "path": "8"
    },
    "180": {
      "fn": "Builders.setBuilderPublickey",
      "offset": [
        694,
        948
      ],
      "op": "JUMPDEST",
      "path": "8"
    },
    "181": {
      "fn": "Builders.setBuilderPublickey",
      "offset": [
        694,
        948
      ],
      "op": "STOP",
      "path": "8"
    },
    "182": {
      "fn": "Builders.setBuilderPublickey",
      "offset": [
        694,
        948
      ],
      "op": "JUMPDEST",
      "path": "8"
    },
    "183": {
      "fn": "Builders.setBuilderPublickey",
      "offset": [
        813,
        823
      ],
      "op": "CALLER",
      "path": "8",
      "statement": 0
    },
    "184": {
      "fn": "Builders.setBuilderPublickey",
      "offset": [
        780,
        788
      ],
      "op": "PUSH1",
      "path": "8",
      "value": "0x0"
    },
    "186": {
      "fn": "Builders.setBuilderPublickey",
      "offset": [
        780,
        800
      ],
      "op": "DUP2",
      "path": "8"
    },
    "187": {
      "fn": "Builders.setBuilderPublickey",
      "offset": [
        780,
        800
      ],
      "op": "DUP2",
      "path": "8"
    },
    "188": {
      "fn": "Builders.setBuilderPublickey",
      "offset": [
        780,
        800
      ],
      "op": "MSTORE",
      "path": "8"
    },
    "189": {
      "fn": "Builders.setBuilderPublickey",
      "offset": [
        780,
        800
      ],
      "op": "PUSH1",
      "path": "8",
      "value": "0x20"
    },
    "191": {
      "fn": "Builders.setBuilderPublickey",
      "offset": [
        780,
        800
      ],
      "op": "DUP2",
      "path": "8"
    },
    "192": {
      "fn": "Builders.setBuilderPublickey",
      "offset": [
        780,
        800
      ],
      "op": "SWAP1",
      "path": "8"
    },
    "193": {
      "fn": "Builders.setBuilderPublickey",
      "offset": [
        780,
        800
      ],
      "op": "MSTORE",
      "path": "8"
    },
    "194": {
      "fn": "Builders.setBuilderPublickey",
      "offset": [
        780,
        800
      ],
      "op": "PUSH1",
      "path": "8",
      "value": "0x40"
    },
    "196": {
      "fn": "Builders.setBuilderPublickey",
      "offset": [
        780,
        800
      ],
      "op": "SWAP1",
      "path": "8"
    },
    "197": {
      "fn": "Builders.setBuilderPublickey",
      "offset": [
        780,
        800
      ],
      "op": "KECCAK256",
      "path": "8"
    },
    "198": {
      "fn": "Builders.setBuilderPublickey",
      "offset": [
        780,
        809
      ],
      "op": "SLOAD",
      "path": "8"
    },
    "199": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "201": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "203": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "205": {
      "op": "SHL"
    },
    "206": {
      "op": "SUB"
    },
    "207": {
      "fn": "Builders.setBuilderPublickey",
      "offset": [
        780,
        809
      ],
      "op": "AND",
      "path": "8"
    },
    "208": {
      "branch": 3,
      "fn": "Builders.setBuilderPublickey",
      "offset": [
        780,
        823
      ],
      "op": "EQ",
      "path": "8"
    },
    "209": {
      "fn": "Builders.setBuilderPublickey",
      "offset": [
        772,
        843
      ],
      "op": "PUSH2",
      "path": "8",
      "value": "0x112"
    },
    "212": {
      "branch": 3,
      "fn": "Builders.setBuilderPublickey",
      "offset": [
        772,
        843
      ],
      "op": "JUMPI",
      "path": "8"
    },
    "213": {
      "fn": "Builders.setBuilderPublickey",
      "offset": [
        772,
        843
      ],
      "op": "PUSH1",
      "path": "8",
      "value": "0x40"
    },
    "215": {
      "fn": "Builders.setBuilderPublickey",
      "offset": [
        772,
        843
      ],
      "op": "MLOAD",
      "path": "8"
    },
    "216": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "220": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "222": {
      "op": "SHL"
    },
    "223": {
      "fn": "Builders.setBuilderPublickey",
      "offset": [
        772,
        843
      ],
      "op": "DUP2",
      "path": "8"
    },
    "224": {
      "fn": "Builders.setBuilderPublickey",
      "offset": [
        772,
        843
      ],
      "op": "MSTORE",
      "path": "8"
    },
    "225": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "227": {
      "fn": "Builders.setBuilderPublickey",
      "offset": [
        772,
        843
      ],
      "op": "PUSH1",
      "path": "8",
      "value": "0x4"
    },
    "229": {
      "fn": "Builders.setBuilderPublickey",
      "offset": [
        772,
        843
      ],
      "op": "DUP3",
      "path": "8"
    },
    "230": {
      "fn": "Builders.setBuilderPublickey",
      "offset": [
        772,
        843
      ],
      "op": "ADD",
      "path": "8"
    },
    "231": {
      "op": "MSTORE"
    },
    "232": {
      "op": "PUSH1",
      "value": "0xF"
    },
    "234": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "236": {
      "op": "DUP3"
    },
    "237": {
      "op": "ADD"
    },
    "238": {
      "op": "MSTORE"
    },
    "239": {
      "op": "PUSH15",
      "value": "0x109D5A5B19195C881B9BDD081CD95D"
    },
    "255": {
      "op": "PUSH1",
      "value": "0x8A"
    },
    "257": {
      "op": "SHL"
    },
    "258": {
      "op": "PUSH1",
      "value": "0x44"
    },
    "260": {
      "op": "DUP3"
    },
    "261": {
      "op": "ADD"
    },
    "262": {
      "op": "MSTORE"
    },
    "263": {
      "op": "PUSH1",
      "value": "0x64"
    },
    "265": {
      "op": "ADD"
    },
    "266": {
      "fn": "Builders.setBuilderPublickey",
      "offset": [
        772,
        843
      ],
      "op": "PUSH1",
      "path": "8",
      "value": "0x40"
    },
    "268": {
      "fn": "Builders.setBuilderPublickey",
      "offset": [
        772,
        843
      ],
      "op": "MLOAD",
      "path": "8"
    },
    "269": {
      "fn": "Builders.setBuilderPublickey",
      "offset": [
        772,
        843
      ],
      "op": "DUP1",
      "path": "8"
    },
    "270": {
      "fn": "Builders.setBuilderPublickey",
      "offset": [
        772,
        843
      ],
      "op": "SWAP2",
      "path": "8"
    },
    "271": {
      "fn": "Builders.setBuilderPublickey",
      "offset": [
        772,
        843
      ],
      "op": "SUB",
      "path": "8"
    },
    "272": {
      "fn": "Builders.setBuilderPublickey",
      "offset": [
        772,
        843
      ],
      "op": "SWAP1",
      "path": "8"
    },
    "273": {
      "fn": "Builders.setBuilderPublickey",
      "offset": [
        772,
        843
      ],
      "op": "REVERT",
      "optimizer_revert": true,
      "path": "8"
    },
    "274": {
      "fn": "Builders.setBuilderPublickey",
      "offset": [
        772,
        843
      ],
      "op": "JUMPDEST",
      "path": "8"
    },
    "275": {
      "fn": "Builders.setBuilderPublickey",
      "offset": [
        862,
        872
      ],
      "op": "CALLER",
      "path": "8",
      "statement": 1
    },
    "276": {
      "fn": "Builders.setBuilderPublickey",
      "offset": [
        853,
        861
      ],
      "op": "PUSH1",
      "path": "8",
      "value": "0x0"
    },
    "278": {
      "fn": "Builders.setBuilderPublickey",
      "offset": [
        853,
        873
      ],
      "op": "SWAP1",
      "path": "8"
    },
    "279": {
      "fn": "Builders.setBuilderPublickey",
      "offset": [
        853,
        873
      ],
      "op": "DUP2",
      "path": "8"
    },
    "280": {
      "fn": "Builders.setBuilderPublickey",
      "offset": [
        853,
        873
      ],
      "op": "MSTORE",
      "path": "8"
    },
    "281": {
      "fn": "Builders.setBuilderPublickey",
      "offset": [
        853,
        873
      ],
      "op": "PUSH1",
      "path": "8",
      "value": "0x20"
    },
    "283": {
      "fn": "Builders.setBuilderPublickey",
      "offset": [
        853,
        873
      ],
      "op": "DUP2",
      "path": "8"
    },
    "284": {
      "fn": "Builders.setBuilderPublickey",
      "offset": [
        853,
        873
      ],
      "op": "SWAP1",
      "path": "8"
    },
    "285": {
      "fn": "Builders.setBuilderPublickey",
      "offset": [
        853,
        873
      ],
      "op": "MSTORE",
      "path": "8"
    },
    "286": {
      "fn": "Builders.setBuilderPublickey",
      "offset": [
        853,
        873
      ],
      "op": "PUSH1",
      "path": "8",
      "value": "0x40"
    },
    "288": {
      "fn": "Builders.setBuilderPublickey",
      "offset": [
        853,
        873
      ],
      "op": "SWAP1",
      "path": "8"
    },
    "289": {
      "fn": "Builders.setBuilderPublickey",
      "offset": [
        853,
        873
      ],
      "op": "KECCAK256",
      "path": "8"
    },
    "290": {
      "fn": "Builders.setBuilderPublickey",
      "offset": [
        853,
        889
      ],
      "op": "DUP1",
      "path": "8"
    },
    "291": {
      "fn": "Builders.setBuilderPublickey",
      "offset": [
        853,
        889
      ],
      "op": "SLOAD",
      "path": "8"
    },
    "292": {
      "fn": "Builders.setBuilderPublickey",
      "offset": [
        853,
        889
      ],
      "op": "SWAP3",
      "path": "8"
    },
    "293": {
      "fn": "Builders.setBuilderPublickey",
      "offset": [
        853,
        889
      ],
      "op": "ISZERO",
      "path": "8"
    },
    "294": {
      "fn": "Builders.setBuilderPublickey",
      "offset": [
        853,
        889
      ],
      "op": "ISZERO",
      "path": "8"
    },
    "295": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "297": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "299": {
      "op": "SHL"
    },
    "300": {
      "fn": "Builders.setBuilderPublickey",
      "offset": [
        853,
        889
      ],
      "op": "MUL",
      "path": "8"
    },
    "301": {
      "op": "PUSH1",
      "value": "0xFF"
    },
    "303": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "305": {
      "op": "SHL"
    },
    "306": {
      "op": "NOT"
    },
    "307": {
      "fn": "Builders.setBuilderPublickey",
      "offset": [
        853,
        889
      ],
      "op": "SWAP1",
      "path": "8"
    },
    "308": {
      "fn": "Builders.setBuilderPublickey",
      "offset": [
        853,
        889
      ],
      "op": "SWAP4",
      "path": "8"
    },
    "309": {
      "fn": "Builders.setBuilderPublickey",
      "offset": [
        853,
        889
      ],
      "op": "AND",
      "path": "8"
    },
    "310": {
      "fn": "Builders.setBuilderPublickey",
      "offset": [
        853,
        889
      ],
      "op": "SWAP3",
      "path": "8"
    },
    "311": {
      "fn": "Builders.setBuilderPublickey",
      "offset": [
        853,
        889
      ],
      "op": "SWAP1",
      "path": "8"
    },
    "312": {
      "fn": "Builders.setBuilderPublickey",
      "offset": [
        853,
        889
      ],
      "op": "SWAP3",
      "path": "8"
    },
    "313": {
      "fn": "Builders.setBuilderPublickey",
      "offset": [
        853,
        889
      ],
      "op": "OR",
      "path": "8"
    },
    "314": {
      "fn": "Builders.setBuilderPublickey",
      "offset": [
        853,
        889
      ],
      "op": "DUP3",
      "path": "8"
    },
    "315": {
      "fn": "Builders.setBuilderPublickey",
      "offset": [
        853,
        889
      ],
      "op": "SSTORE",
      "path": "8"
    },
    "316": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "318": {
      "fn": "Builders.setBuilderPublickey",
      "offset": [
        899,
        929
      ],
      "op": "SWAP1",
      "path": "8",
      "statement": 2
    },
    "319": {
      "fn": "Builders.setBuilderPublickey",
      "offset": [
        899,
        929
      ],
      "op": "SWAP2",
      "path": "8"
    },
    "320": {
      "fn": "Builders.setBuilderPublickey",
      "offset": [
        899,
        929
      ],
      "op": "ADD",
      "path": "8"
    },
    "321": {
      "fn": "Builders.setBuilderPublickey",
      "offset": [
        899,
        941
      ],
      "op": "SSTORE",
      "path": "8"
    },
    "322": {
      "fn": "Builders.setBuilderPublickey",
      "jump": "o",
      "offset": [
        694,
        948
      ],
      "op": "JUMP",
      "path": "8"
    },
    "323": {
      "op": "JUMPDEST"
    },
    "324": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "326": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "328": {
      "op": "DUP3"
    },
    "329": {
      "op": "DUP5"
    },
    "330": {
      "op": "SUB"
    },
    "331": {
      "op": "SLT"
    },
    "332": {
      "op": "ISZERO"
    },
    "333": {
      "op": "PUSH2",
      "value": "0x155"
    },
    "336": {
      "op": "JUMPI"
    },
    "337": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "339": {
      "op": "DUP1"
    },
    "340": {
      "op": "REVERT"
    },
    "341": {
      "op": "JUMPDEST"
    },
    "342": {
      "op": "DUP2"
    },
    "343": {
      "op": "CALLDATALOAD"
    },
    "344": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "346": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "348": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "350": {
      "op": "SHL"
    },
    "351": {
      "op": "SUB"
    },
    "352": {
      "op": "DUP2"
    },
    "353": {
      "op": "AND"
    },
    "354": {
      "op": "DUP2"
    },
    "355": {
      "op": "EQ"
    },
    "356": {
      "op": "PUSH2",
      "value": "0x16C"
    },
    "359": {
      "op": "JUMPI"
    },
    "360": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "362": {
      "op": "DUP1"
    },
    "363": {
      "op": "REVERT"
    },
    "364": {
      "op": "JUMPDEST"
    },
    "365": {
      "op": "SWAP4"
    },
    "366": {
      "op": "SWAP3"
    },
    "367": {
      "op": "POP"
    },
    "368": {
      "op": "POP"
    },
    "369": {
      "op": "POP"
    },
    "370": {
      "jump": "o",
      "op": "JUMP"
    },
    "371": {
      "op": "JUMPDEST"
    },
    "372": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "374": {
      "op": "DUP1"
    },
    "375": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "377": {
      "op": "DUP4"
    },
    "378": {
      "op": "DUP6"
    },
    "379": {
      "op": "SUB"
    },
    "380": {
      "op": "SLT"
    },
    "381": {
      "op": "ISZERO"
    },
    "382": {
      "op": "PUSH2",
      "value": "0x186"
    },
    "385": {
      "op": "JUMPI"
    },
    "386": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "388": {
      "op": "DUP1"
    },
    "389": {
      "op": "REVERT"
    },
    "390": {
      "op": "JUMPDEST"
    },
    "391": {
      "op": "DUP3"
    },
    "392": {
      "op": "CALLDATALOAD"
    },
    "393": {
      "op": "DUP1"
    },
    "394": {
      "op": "ISZERO"
    },
    "395": {
      "op": "ISZERO"
    },
    "396": {
      "op": "DUP2"
    },
    "397": {
      "op": "EQ"
    },
    "398": {
      "op": "PUSH2",
      "value": "0x196"
    },
    "401": {
      "op": "JUMPI"
    },
    "402": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "404": {
      "op": "DUP1"
    },
    "405": {
      "op": "REVERT"
    },
    "406": {
      "op": "JUMPDEST"
    },
    "407": {
      "op": "SWAP5"
    },
    "408": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "410": {
      "op": "SWAP4"
    },
    "411": {
      "op": "SWAP1"
    },
    "412": {
      "op": "SWAP4"
    },
    "413": {
      "op": "ADD"
    },
    "414": {
      "op": "CALLDATALOAD"
    },
    "415": {
      "op": "SWAP4"
    },
    "416": {
      "op": "POP"
    },
    "417": {
      "op": "POP"
    },
    "418": {
      "op": "POP"
    },
    "419": {
      "jump": "o",
      "op": "JUMP"
    }
  },
  "sha1": "6463ab570bb0ed5a589644c3bae15387233904b0",
  "source": "// SPDX-License-Identifier: GPL3\npragma solidity ^0.8.0;\n\n/**\n * @dev Reference builder in the project\n */\ncontract Builders {\n    // Plan designer entity (builder)\n    struct Builder {\n        address _address;\n        bool parity;\n        bytes32 publicKey;\n    }\n\n    mapping(address => Builder) public builders;\n\n    modifier onlyBuilder {\n        require(\n            builders[msg.sender]._address != address(0),\n            \"Only builders are allowed to execute this.\"\n        );\n        _;\n    }\n\n    /**\n     * @notice Builder can update his public key.\n     * @param parity based on header value (0x02/0x03 - false/true)\n     * @param publicKey compressed public key value\n     */\n    function setBuilderPublickey(bool parity, bytes32 publicKey) public {\n        require(builders[msg.sender]._address == msg.sender, \"Builder not set\");\n        builders[msg.sender].parity = parity;\n        builders[msg.sender].publicKey = publicKey;\n    }\n\n    // TODO - add builder function ?\n}\n",
  "sourceMap": "107:881:8:-:0;;;;;;;;;;;;;;;;;;;",
  "sourcePath": "contracts/project/Builders.sol",
  "type": "contract"
}